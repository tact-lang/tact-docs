{
  "fileTypes": [
    "tact"
  ],
  "name": "Tact Language",
  "foldingStartMarker": "\\{s*$",
  "foldingStopMarker": "^\\s*\\}",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#natspec"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#global"
    },
    {
      "include": "#control"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#primitive"
    },
    {
      "include": "#type-primitive"
    },
    {
      "include": "#declaration"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "natspec": {
      "patterns": [
        {
          "begin": "/\\*\\*",
          "end": "\\*/",
          "name": "comment.block.documentation",
          "patterns": [
            {
              "include": "#natspec-tags"
            }
          ]
        },
        {
          "begin": "///",
          "end": "$",
          "name": "comment.block.documentation",
          "patterns": [
            {
              "include": "#natspec-tags"
            }
          ]
        }
      ]
    },
    "natspec-tags": {
      "patterns": [
        {
          "include": "#comment-todo"
        },
        {
          "include": "#natspec-tag-title"
        },
        {
          "include": "#natspec-tag-author"
        },
        {
          "include": "#natspec-tag-notice"
        },
        {
          "include": "#natspec-tag-dev"
        },
        {
          "include": "#natspec-tag-param"
        },
        {
          "include": "#natspec-tag-return"
        }
      ]
    },
    "natspec-tag-title": {
      "match": "(@title)\\b",
      "name": "storage.type.title.natspec"
    },
    "natspec-tag-author": {
      "match": "(@author)\\b",
      "name": "storage.type.author.natspec"
    },
    "natspec-tag-notice": {
      "match": "(@notice)\\b",
      "name": "storage.type.dev.natspec"
    },
    "natspec-tag-dev": {
      "match": "(@dev)\\b",
      "name": "storage.type.dev.natspec"
    },
    "natspec-tag-param": {
      "match": "(@param)(\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.param.natspec"
        },
        "3": {
          "name": "variable.other.natspec"
        }
      }
    },
    "natspec-tag-return": {
      "match": "(@return)\\b",
      "name": "storage.type.return.natspec"
    },
    "comment": {
      "patterns": [
        {
          "include": "#comment-line"
        },
        {
          "include": "#comment-block"
        }
      ]
    },
    "comment-todo": {
      "match": "(?i)\\b(FIXME|TODO|CHANGED|XXX|IDEA|HACK|NOTE|REVIEW|NB|BUG|QUESTION|COMBAK|TEMP|SUPPRESS|LINT|\\w+-disable|\\w+-suppress)\\b(?-i)",
      "name": "keyword.comment.todo"
    },
    "comment-line": {
      "begin": "(?<!tp:)//[^/]",
      "end": "$",
      "name": "comment.line",
      "patterns": [
        {
          "include": "#comment-todo"
        }
      ]
    },
    "comment-block": {
      "begin": "/\\*[^*]",
      "end": "\\*/",
      "name": "comment.block",
      "patterns": [
        {
          "include": "#comment-todo"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "include": "#operator-logic"
        },
        {
          "include": "#operator-mapping"
        },
        {
          "include": "#operator-arithmetic"
        },
        {
          "include": "#operator-binary"
        },
        {
          "include": "#operator-assignment"
        }
      ]
    },
    "operator-logic": {
      "match": "(==|<(?!<)|<=|>(?!>)|>=|\\&\\&|\\|\\||\\:(?!=)|\\?|!|!!|!=)",
      "name": "keyword.operator.logic"
    },
    "operator-mapping": {
      "match": "(=>)",
      "name": "keyword.operator.mapping"
    },
    "operator-arithmetic": {
      "match": "(\\+|\\-|\\/|\\*|%)",
      "name": "keyword.operator.arithmetic"
    },
    "operator-binary": {
      "match": "(\\^|\\&|\\||<<|>>)",
      "name": "keyword.operator.binary"
    },
    "operator-assignment": {
      "match": "(\\:?=)",
      "name": "keyword.operator.assignment"
    },
    "control": {
      "patterns": [
        {
          "include": "#control-flow"
        },
        {
          "include": "#control-import"
        },
        {
          "include": "#control-underscore"
        },
        {
          "include": "#control-other"
        }
      ]
    },
    "control-flow": {
      "patterns": [
        {
          "match": "\\b(if|else|while|do|until|repeat|return|extends|mutates|abstract|native|let|override|virtual|const|self|is|initOf|map|primitive|as|null)\\b",
          "name": "keyword.control.flow"
        }
      ]
    },
    "control-import": {
      "patterns": [
        {
          "begin": "\\b(import)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.import"
            }
          },
          "end": "(?=\\;)",
          "patterns": [
            {
              "begin": "((?=\\{))",
              "end": "((?=\\}))",
              "patterns": [
                {
                  "match": "\\b(\\w+)\\b",
                  "name": "entity.name.type.interface"
                }
              ]
            },
            {
              "match": "\\b(from)\\b",
              "name": "keyword.control.import.from"
            },
            {
              "include": "#string"
            },
            {
              "include": "#punctuation"
            }
          ]
        },
        {
          "match": "\\b(import)\\b",
          "name": "keyword.control.import"
        }
      ]
    },
    "control-underscore": {
      "match": "\\b(_)\\b",
      "name": "constant.other.underscore"
    },
    "control-other": {
      "match": "\\b(new|delete)\\b",
      "name": "keyword.control"
    },
    "constant": {
      "patterns": [
        {
          "include": "#constant-boolean"
        },
        {
          "include": "#constant-time"
        },
        {
          "include": "#constant-currency"
        }
      ]
    },
    "constant-boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean"
    },
    "constant-time": {
      "match": "\\b(now)\\b",
      "name": "constant.language.time"
    },
    "constant-currency": {
      "match": "\\b(ton)\\b",
      "name": "constant.language.currency"
    },
    "number": {
      "patterns": [
        {
          "include": "#number-decimal"
        },
        {
          "include": "#number-octal"
        },
        {
          "include": "#number-binary"
        },
        {
          "include": "#number-hex"
        },
        {
          "include": "#number-scientific"
        }
      ]
    },
    "number-decimal": {
      "match": "\\b([0-9_]+(\\.[0-9_]+)?)\\b",
      "name": "constant.numeric.decimal"
    },
    "number-octal": {
      "match": "\\b(0o[0-7_]+)\\b",
      "name": "constant.numeric.octal"
    },
    "number-binary": {
      "match": "\\b(0b[01_]+)\\b",
      "name": "constant.numeric.binary"
    },
    "number-hex": {
      "match": "\\b(0[xX][a-fA-F0-9_]+)\\b",
      "name": "constant.numeric.hexadecimal"
    },
    "number-scientific": {
      "match": "\\b(?:0\\.(?:0[1-9]|[1-9][0-9_]?)|[1-9][0-9_]*(?:\\.\\d{1,2})?)(?:e[+-]?[0-9_]+)?",
      "name": "constant.numeric.scientific"
    },
    "string": {
      "patterns": [
        {
          "match": "\\\".*?\\\"",
          "name": "string.quoted.double"
        },
        {
          "match": "\\'.*?\\'",
          "name": "string.quoted.single"
        }
      ]
    },
    "primitive": {
      "patterns": [
        {
          "include": "#number-decimal"
        },
        {
          "include": "#number-octal"
        },
        {
          "include": "#number-binary"
        },
        {
          "include": "#number-hex"
        },
        {
          "include": "#number-scientific"
        },
        {
          "include": "#string"
        }
      ]
    },
    "bounce-declaration": {
      "name": "meta.struct.field.tact",
      "begin": "(bounce)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.bounce"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#declaration-function-arguments"
        }
      ]
    },
    "type-primitive": {
      "patterns": [
        {
          "begin": "\\b(Int|Bool|Address|Slice|Cell|Builder|String|StringBuilder|(?<=: )[A-Z][^ ]*)\\b",
          "beginCaptures": {
            "1": {
              "name": "support.type.primitive"
            }
          },
          "end": "(?=\\{|\\;|\\=|\\,|\\))",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#type-as"
            },
            {
              "name": "keyword.operator.optional.tact",
              "match": "\\?"
            },
            {
              "match": "\\b[\\w]+\\b",
              "name": "entity.name.type.tact"
            }
          ]
        }
      ]
    },
    "type-as": {
      "name": "meta.type.annotation.as",
      "begin": "(as)\\s+",
      "end": "(?=\\{|\\;|\\=|\\,|\\))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.as"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "match": "\\b[\\w]+\\b",
          "name": "storage.modifier"
        }
      ]
    },
    "global": {
      "patterns": [
        {
          "include": "#global-variables"
        },
        {
          "include": "#global-functions"
        }
      ]
    },
    "global-variables": {
      "patterns": [
        {
          "match": "\\b(self)\\b",
          "name": "variable.language.self"
        }
      ]
    },
    "global-functions": {
      "patterns": [
        {
          "match": "\\b(ton|require|myBalance|myAddress|contractAddress|contractAddressExt)\\b",
          "name": "variable.language.transaction"
        },
        {
          "match": "\\b(send|SendParameters|emit|reply)\\b",
          "name": "variable.language.message"
        },
        {
          "match": "\\b(randomInt|random)\\b",
          "name": "variable.language.random"
        },
        {
          "match": "\\b(checkSignature|checkDataSignature|min|max|abs)\\b",
          "name": "variable.language.math"
        },
        {
          "match": "\\b(endCell|beginCell)\\b",
          "name": "variable.language.cell"
        },
        {
          "match": "\\b(abi|readForwardFee|throw|nativeThrowWhen|nativeThrowUnless|getConfigParam|nativeRandomize|nativeRandomizeLt|nativePrepareRandom|nativeRandom|nativeRandomInterval|nativeReserve)\\b",
          "name": "variable.language.advanced"
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "match": "\\b(\\_\\w+)\\b",
          "captures": {
            "1": {
              "name": "variable.parameter.function"
            }
          }
        },
        {
          "match": "(?:\\.)(\\w+)\\b",
          "captures": {
            "1": {
              "name": "support.variable.property"
            }
          },
          "patterns": [
            {
              "include": "#type-primitive"
            }
          ]
        },
        {
          "match": "\\b(\\w+)\\b",
          "captures": {
            "1": {
              "name": "variable.parameter.other"
            }
          },
          "patterns": [
            {
              "include": "#type-primitive"
            },
            {
              "include": "#primitive"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#global"
            }
          ]
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#declaration-message"
        },
        {
          "include": "#declaration-trait"
        },
        {
          "include": "#declaration-contract"
        },
        {
          "include": "#declaration-interface"
        },
        {
          "include": "#declaration-function"
        },
        {
          "include": "#declaration-init"
        },
        {
          "include": "#declaration-storage"
        }
      ]
    },
    "declaration-message": {
      "patterns": [
        {
          "match": "\\b(message)(\\([0-9x]+\\))?\\s+(\\w+)\\b\\s*(?=\\{)",
          "captures": {
            "1": {
              "name": "storage.type.message"
            },
            "2": {
              "name": "constant.numeric.decimal"
            },
            "3": {
              "name": "entity.name.type.message"
            }
          },
          "patterns": [
            {
              "include": "#number"
            }
          ]
        }
      ]
    },
    "declaration-storage-field": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#control"
        },
        {
          "include": "#type-primitive"
        },
        {
          "include": "#primitive"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#punctuation"
        }
      ]
    },
    "declaration-storage": {
      "patterns": [
        {
          "include": "#declaration-storage-mapping"
        },
        {
          "include": "#declaration-struct"
        },
        {
          "include": "#declaration-storage-field"
        }
      ]
    },
    "declaration-trait": {
      "patterns": [
        {
          "match": "\\b(trait)\\b\\s+(\\w+)\\b\\s*(?=\\{)",
          "captures": {
            "1": {
              "name": "storage.type.trait"
            },
            "2": {
              "name": "entity.name.type.trait"
            }
          }
        },
        {
          "begin": "\\b(trait)\\b\\s+(\\w+)\\b\\s+\\b(with)\\b\\s+",
          "end": "(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.trait"
            },
            "2": {
              "name": "entity.name.type.trait"
            },
            "3": {
              "name": "keyword.control.flow"
            },
            "4": {
              "name": "entity.name.type.trait"
            }
          }
        }
      ]
    },
    "declaration-contract": {
      "patterns": [
        {
          "match": "\\b(contract)\\b\\s+(\\w+)\\b\\s*(?=\\{)",
          "captures": {
            "1": {
              "name": "storage.type.contract"
            },
            "2": {
              "name": "entity.name.type.contract"
            }
          }
        },
        {
          "begin": "\\b(contract)\\b\\s+(\\w+)\\b\\s+\\b(with)\\b\\s+",
          "end": "(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.contract"
            },
            "2": {
              "name": "entity.name.type.contract"
            },
            "3": {
              "name": "keyword.control.flow"
            },
            "4": {
              "name": "entity.name.type.contract"
            }
          }
        }
      ]
    },
    "declaration-interface": {
      "patterns": [
        {
          "match": "\\b(interface)\\b\\s+(\\w+)\\b\\s*(?=\\{)",
          "captures": {
            "1": {
              "name": "storage.type.interface"
            },
            "2": {
              "name": "entity.name.type.interface"
            }
          }
        }
      ]
    },
    "declaration-struct": {
      "patterns": [
        {
          "match": "\\b(struct)(\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.struct"
            },
            "3": {
              "name": "entity.name.type.struct"
            }
          }
        },
        {
          "begin": "\\b(struct)\\b\\s*(\\w+)?\\b\\s*(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.struct"
            },
            "2": {
              "name": "entity.name.type.struct"
            }
          },
          "end": "(?=\\})",
          "patterns": [
            {
              "include": "#type-primitive"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "declaration-init": {
      "patterns": [
        {
          "begin": "\\b(init)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#declaration-function-arguments"
            },
            {
              "begin": "(?<=\\))",
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#function-call"
                }
              ]
            }
          ]
        },
        {
          "match": "\\b(init)\\b",
          "captures": {
            "1": {
              "name": "storage.type.init"
            }
          }
        }
      ]
    },
    "declaration-function-arguments": {
      "patterns": [
        {
          "match": "(?:(self)|(\\b[\\w]+\\b))\\s*(:)\\s*(\\b[\\w]+\\b)",
          "captures": {
            "1": {
              "name": "variable.language.self"
            },
            "2": {
              "name": "variable.name"
            },
            "4": {
              "name": "entity.name.type"
            }
          }
        },
        {
          "include": "#variable"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "declaration-function": {
      "patterns": [
        {
          "begin": "\\b((?:(?:public|get|extends|override|inline|virtual|mutates)|\\s+)*)\\s+(fun|native)\\s+(\\w+)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow"
            },
            "2": {
              "name": "keyword.control.flow"
            },
            "3": {
              "name": "entity.name.function"
            }
          },
          "end": "(?=\\{|;)",
          "patterns": [
            {
              "include": "#natspec"
            },
            {
              "include": "#global"
            },
            {
              "include": "#control-flow"
            },
            {
              "include": "#function-call"
            },
            {
              "include": "#declaration-function-arguments"
            }
          ]
        },
        {
          "match": "\\b(fun)\\s+([A-Za-z_]\\w*)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.flow"
            },
            "2": {
              "name": "entity.name.function"
            }
          }
        }
      ]
    },
    "declaration-storage-mapping": {
      "patterns": [
        {
          "begin": "\\b(map)\\b",
          "beginCaptures": {
            "1": {
              "name": "storage.type.mapping"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#declaration-storage-mapping"
            },
            {
              "include": "#type-primitive"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#operator"
            }
          ]
        },
        {
          "match": "\\b(map)\\b",
          "name": "storage.type.mapping"
        }
      ]
    },
    "function-call": {
      "match": "\\b([A-Za-z_]\\w*)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function"
        }
      }
    },
    "punctuation": {
      "patterns": [
        {
          "match": ";",
          "name": "punctuation.terminator.statement"
        },
        {
          "match": "\\.",
          "name": "punctuation.accessor"
        },
        {
          "match": ",",
          "name": "punctuation.separator"
        },
        {
          "match": "\\{",
          "name": "punctuation.brace.curly.begin"
        },
        {
          "match": "\\}",
          "name": "punctuation.brace.curly.end"
        },
        {
          "match": "\\[",
          "name": "punctuation.brace.square.begin"
        },
        {
          "match": "\\]",
          "name": "punctuation.brace.square.end"
        },
        {
          "match": "\\(",
          "name": "punctuation.parameters.begin"
        },
        {
          "match": "\\)",
          "name": "punctuation.parameters.end"
        }
      ]
    }
  },
  "scopeName": "source.tact"
}
